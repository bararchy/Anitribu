import __main__
import statutil
import consoleutil
import configutil
import fileutil
import time
from logutil import log
from random import Random

####################
#  Sound Manager v0.01
#------------------
"""

A prototype Sound Manager for VTMB 

"""

# This is autogenerated based off the contents of the directory
# Vampire/sound/battlecries/
g_battleCache={}
g_options=configutil.Options("mods.cfg")
g_inEvent=0
g_c1index=0
g_c2index=0

def OnBeginCombatMusic():
    global g_battleCache
    if len(g_battleCache) == 0: updateBattleCache()
    if len(g_battleCache) != 0:
        __main__.ScheduleTask(0.0,"soundutil.OnBeginCombatMusicHelper()")

def OnBeginNormalMusic():
    global g_battleCache
    if len(g_battleCache) == 0: updateBattleCache()

def OnBeginCombatMusicHelper():
    global g_battleCache
    global g_c1index
    global g_c2index

    R = Random( time.time() )

    if len(g_battleCache) == 0: updateBattleCache()
    if len(g_battleCache) != 0:
        c1 = __main__.FindEntityByName("companion1")
        if c1 and 0 == c1.GetData("InFakeDeath"):
            name=None
            key=c1.GetID()
            npcIndex = statutil.GetIndex(key)
            if -1 == npcIndex:
                cdata=None
                try:
                    cdata = __main__.G.npcdata[key]
                except:
                    log("soundutil : OnBeginCombatMusicHelper() - henchman key [%s] not found in npcdata" % key)
                if cdata:
                    name=cdata["OName"].lower()
            else:
                stats = statutil.GetAllStatsByIndex(npcIndex)
                name = stats[statutil.NAME].lower()
            if None!=name:
                if g_battleCache.has_key(name):
                    blist = g_battleCache[name]
                    if len(blist) != 0:
                        if g_c1index >= len(blist): g_c1index=0
                        log("Companion1 : say [%s]" % blist[g_c1index])
                        if "Boo" == c1.GetData("OName"):
                            c1.PlayDialogFile("/battlecries/%s" % blist[g_c1index])
                        else:
                            __main__.ScheduleTask(R.randint(0,4),"__main__.FindEntityByName('companion1').PlayDialogFile('/battlecries/%s')" % blist[g_c1index])
                        g_c1index = g_c1index + 1
        c2 = __main__.FindEntityByName("companion2")
        if c2 and 0 == c2.GetData("InFakeDeath"):
            name=None
            key=c2.GetID()
            npcIndex = statutil.GetIndex(key)
            if -1 == npcIndex:
                cdata=None
                try:
                    cdata = __main__.G.npcdata[key]
                except:
                    log("soundutil : OnBeginCombatMusicHelper() - henchman key [%s] not found in npcdata" % key)
                if cdata:
                    name=cdata["OName"].lower()
            else:
                stats = statutil.GetAllStatsByIndex(npcIndex)
                name = stats[statutil.NAME].lower()
            if None!=name:
                if g_battleCache.has_key(name):
                    blist = g_battleCache[name]
                    if len(blist) != 0:
                        if g_c2index >= len(blist): g_c2index=0
                        log("Companion2 : say [%s]" % blist[g_c2index])
                        if "Boo" == c2.GetData("OName"):
                            c2.PlayDialogFile("/battlecries/%s" % blist[g_c2index])
                        else:
                            __main__.ScheduleTask(R.randint(0,4),"__main__.FindEntityByName('companion2').PlayDialogFile('/battlecries/%s')" % blist[g_c2index])
                        g_c2index = g_c2index + 1
       
def OnEnterMap(mapName):
    global g_battleCache
    if len(g_battleCache) == 0: updateBattleCache()

def updateBattleCache():
    global g_battleCache
    global g_inEvent

    if 0 != g_inEvent: return
    g_inEvent=1
    g_battleCache={}

    try:
        rootdir=fileutil.getcwd()
        if ""==rootdir: return
        path = rootdir + "\\Vampire\\sound\\battlecries"
        if fileutil.exists(path):
            songdirlist=fileutil.listfiles(path)
            if len(songdirlist) != 0:
                sequence=[]
                for dirfile in songdirlist:
                    if dirfile.lower().endswith(".mp3"):
                        sequence.append(dirfile)
                    elif dirfile.lower().endswith(".wav"):
                        sequence.append(dirfile)
                if len(sequence) != 0:
                    i = 0
                    path = rootdir + "\\Vampire\\sound\\battlecries\\"
                    while i < len(sequence):
                        if "_" in sequence[i]:
                            key = sequence[i][:sequence[i].index("_")]
                        if sequence[i].lower().endswith(".mp3"):
                            if isValidMP3(path,sequence[i]):
                                if not g_battleCache.has_key(key):
                                    g_battleCache[key]=[]
                                g_battleCache[key].append(sequence[i])
                        elif sequence[i].lower().endswith(".wav"):
                            if not g_battleCache.has_key(key):
                                g_battleCache[key]=[]
                            g_battleCache[key].append(sequence[i])
                        i=i+1
    finally:
        g_inEvent=0

# returns name of file if it is OK
# returns NONE if file is NOT OK.
def isValidMP3(path,filename):
    fullpath = path + filename
    if -1 == fullpath.find("\\Vampire\\"): 
         log("soundutil : processMP3 - Invalid Directory",3)
         return 0
    if not fileutil.exists(fullpath):
         log("soundutil : processMP3 - [%s] does not exist in Directory [%s]" % (filename,path), 3)
         return 0
    fsize = fileutil.getsize(fullpath)    
    if fsize > 300000:
         log("soundutil : processMP3 - MP3 is larger than size Cap. Ignoring.",2)
         return 0
    # Ignore if it has MP3 Headers
    fsrc = None
    try:
        fsrc = open(fullpath, 'rb')
        ID3 = fsrc.read(3)
        if ID3 != "ID3":
            fsrc.close()
            fsrc = None
            return 1
    finally:
        if fsrc: fsrc.close()

    log("soundutil : processMP3 - MP3 [%s] has ID3v2 tags. Ignoring" % filename, 2)
    return 0
